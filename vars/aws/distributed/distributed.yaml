aws_vars_template_path: vars/aws/distributed/aws.yaml.template
aws_vars_path: vars/aws/distributed/aws.yaml

elasticsearch:
  cluster_name: distributed_cluster_name
  discovery_zen_ping_unicast_hosts: "{{ groups['tag_inventory_group_'+inventory_groups.elk_master]|map('extract', hostvars, 'ec2_private_ip_address')|list|join(',') }}"
  index:
    number_of_shards: 2
    number_of_replicas: 1
  version: 2.4.0

inventory_groups:
  elk_master: "{{ lookup('env','AWS_ELK_MASTER_INVENTORY_GROUP') if lookup('env','AWS_ELK_MASTER_INVENTORY_GROUP') != '' else 'elk_master' }}"
  elk_data: "{{ lookup('env','AWS_ELK_DATA_INVENTORY_GROUP') if lookup('env','AWS_ELK_DATA_INVENTORY_GROUP') != '' else 'elk_data' }}"
  elk_client: "{{ lookup('env','AWS_ELK_CLIENT_INVENTORY_GROUP') if lookup('env','AWS_ELK_CLIENT_INVENTORY_GROUP') != '' else 'elk_client' }}"

env:
  name: "distributed_elk"
  aws:
    region: us-west-2
    security_group:
      name: distributed_elk
      rules:
        - proto: tcp
          from_port: 22
          to_port: 22
          cidr_ip: 0.0.0.0/0
        - proto: tcp
          from_port: 9200
          to_port: 9200
          cidr_ip: 0.0.0.0/0
        - proto: tcp
          from_port: 5601
          to_port: 5601
          cidr_ip: 0.0.0.0/0
        - proto: tcp
          from_port: 9300
          to_port: 9300
          cidr_ip: 0.0.0.0/0

      rules_egress:
        - proto: all
          cidr_ip: "0.0.0.0/0"


    groups:
      - node_type: master_node
        instances:
          number: "{{ lookup('env','AWS_ELK_MASTER_INSTANCE_NUMBER') if lookup('env','AWS_ELK_MASTER_INSTANCE_NUMBER') != '' else 1 }}"
          name: "distributed_elk_master_app"
          type: "{{ lookup('env','MASTER_NODES_INSTANCE_TYPE') if lookup('env','MASTER_NODES_INSTANCE_TYPE') != '' else 't2.medium' }}"
          # Termination by group criteria
          inventory_group: "{{ inventory_groups.elk_master }}"
          security_groups: ["distributed_elk"]
          assign_public_ip: "{{ lookup('env','MASTER_NODES_ASSIGN_PUBLIC_IP') if lookup('env','MASTER_NODES_ASSIGN_PUBLIC_IP') != '' else 'True' }}"
          ebs_optimized: "{{ lookup('env','MASTER_NODES_EBS_OPTIMIZED') if lookup('env','MASTER_NODES_EBS_OPTIMIZED') != '' else 'False' }}"
          volumes:
          - device_name: /dev/sda1
            device_type: gp2
            volume_size: 25
            delete_on_termination: true

      - node_type: data_node
        instances:
          number: "{{ lookup('env','AWS_ELK_DATA_INSTANCE_NUMBER') if lookup('env','AWS_ELK_DATA_INSTANCE_NUMBER') != '' else 2 }}"
          name: "distributed_elk_data_app"
          type: "{{ lookup('env','DATA_NODES_INSTANCE_TYPE') if lookup('env','DATA_NODES_INSTANCE_TYPE') != '' else 't2.medium' }}"
          # Termination by group criteria
          inventory_group: "{{ inventory_groups.elk_data }}"
          security_groups: ["distributed_elk"]
          assign_public_ip: "{{ lookup('env','DATA_NODES_ASSIGN_PUBLIC_IP') if lookup('env','DATA_NODES_ASSIGN_PUBLIC_IP') != '' else 'True' }}"
          ebs_optimized: "{{ lookup('env','DATA_NODES_EBS_OPTIMIZED') if lookup('env','DATA_NODES_EBS_OPTIMIZED') != '' else 'False' }}"
          volumes:
          - device_name: /dev/sda1
            device_type: gp2
            volume_size: 25
            delete_on_termination: true

      - node_type: client_node
        instances:
          number: "{{ lookup('env','AWS_ELK_CLIENT_INSTANCE_NUMBER') if lookup('env','AWS_ELK_CLIENT_INSTANCE_NUMBER') != '' else 1 }}"
          name: "distributed_elk_client_app"
          type: "{{ lookup('env','CLIENT_NODES_INSTANCE_TYPE') if lookup('env','CLIENT_NODES_INSTANCE_TYPE') != '' else 't2.medium' }}"
          # Termination by group criteria
          inventory_group: "{{ inventory_groups.elk_client }}"
          security_groups: ["distributed_elk"]
          assign_public_ip: "{{ lookup('env','CLIENT_NODES_ASSIGN_PUBLIC_IP') if lookup('env','CLIENT_NODES_ASSIGN_PUBLIC_IP') != '' else 'True' }}"
          ebs_optimized: "{{ lookup('env','CLIENT_NODES_EBS_OPTIMIZED') if lookup('env','CLIENT_NODES_EBS_OPTIMIZED') != '' else 'False' }}"
          volumes:
          - device_name: /dev/sda1
            device_type: gp2
            volume_size: 25
            delete_on_termination: true

    key:
      name: distributed_elk


logstash_input_zookeeper_servers_group: "{{ lookup('env','LOGSTASH_INPUT_ZOOKEEPER_SERVERS_GROUP') if lookup('env','LOGSTASH_INPUT_ZOOKEEPER_SERVERS_GROUP') != '' else 'standalone_kafka' }}"

logstash:
  templates_path: "vars/templates/logstash/"

  inputs:
    kafka:
      host: "{{ groups['tag_inventory_group_'+logstash_input_zookeeper_servers_group]|map('extract', hostvars, 'ec2_private_ip_address')|list|join(':2181,')+':2181' }}"
      topic_id: logstash

  outputs:
    elasticsearch:
      host: "{{ ec2_private_ip_address }}"
      port: 9200

  plugins: []
  plugins_update: []


kibana:
  host: "{{ ec2_private_ip_address }}"

  elasticsearch:
    host: "{{ ec2_private_ip_address }}"
    port: 9200


elastalert_elasticsearch_host: "{{ ec2_private_ip_address }}"
